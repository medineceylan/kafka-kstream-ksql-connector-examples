/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.medineceylan.kafkapoc.models;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Transaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8458792332268964124L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transaction\",\"namespace\":\"com.medineceylan.kafkapoc.models\",\"fields\":[{\"name\":\"transaction_type\",\"type\":{\"type\":\"enum\",\"name\":\"TransactionType\",\"symbols\":[\"OPENING\",\"WITHDRAW\",\"DEPOSIT\"]}},{\"name\":\"customer_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"amount\",\"type\":\"double\",\"default\":0},{\"name\":\"is_fraud\",\"type\":\"boolean\",\"default\":false},{\"name\":\"transaction_time\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"transaction time\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Transaction> ENCODER =
      new BinaryMessageEncoder<Transaction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Transaction> DECODER =
      new BinaryMessageDecoder<Transaction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Transaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Transaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Transaction>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Transaction to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Transaction from a ByteBuffer. */
  public static Transaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private TransactionType transaction_type;
   private java.lang.String customer_id;
   private double amount;
   private boolean is_fraud;
  /** transaction time */
   private org.joda.time.DateTime transaction_time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Transaction() {}

  /**
   * All-args constructor.
   * @param transaction_type The new value for transaction_type
   * @param customer_id The new value for customer_id
   * @param amount The new value for amount
   * @param is_fraud The new value for is_fraud
   * @param transaction_time transaction time
   */
  public Transaction(TransactionType transaction_type, java.lang.String customer_id, java.lang.Double amount, java.lang.Boolean is_fraud, org.joda.time.DateTime transaction_time) {
    this.transaction_type = transaction_type;
    this.customer_id = customer_id;
    this.amount = amount;
    this.is_fraud = is_fraud;
    this.transaction_time = transaction_time;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transaction_type;
    case 1: return customer_id;
    case 2: return amount;
    case 3: return is_fraud;
    case 4: return transaction_time;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  protected static final org.apache.avro.data.TimeConversions.DateConversion DATE_CONVERSION = new org.apache.avro.data.TimeConversions.DateConversion();
  protected static final org.apache.avro.data.TimeConversions.TimeConversion TIME_CONVERSION = new org.apache.avro.data.TimeConversions.TimeConversion();
  protected static final org.apache.avro.data.TimeConversions.TimestampConversion TIMESTAMP_CONVERSION = new org.apache.avro.data.TimeConversions.TimestampConversion();
  protected static final org.apache.avro.Conversions.DecimalConversion DECIMAL_CONVERSION = new org.apache.avro.Conversions.DecimalConversion();

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      TIMESTAMP_CONVERSION,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transaction_type = (TransactionType)value$; break;
    case 1: customer_id = (java.lang.String)value$; break;
    case 2: amount = (java.lang.Double)value$; break;
    case 3: is_fraud = (java.lang.Boolean)value$; break;
    case 4: transaction_time = (org.joda.time.DateTime)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'transaction_type' field.
   * @return The value of the 'transaction_type' field.
   */
  public TransactionType getTransactionType() {
    return transaction_type;
  }


  /**
   * Gets the value of the 'customer_id' field.
   * @return The value of the 'customer_id' field.
   */
  public java.lang.String getCustomerId() {
    return customer_id;
  }


  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Double getAmount() {
    return amount;
  }


  /**
   * Gets the value of the 'is_fraud' field.
   * @return The value of the 'is_fraud' field.
   */
  public java.lang.Boolean getIsFraud() {
    return is_fraud;
  }


  /**
   * Gets the value of the 'transaction_time' field.
   * @return transaction time
   */
  public org.joda.time.DateTime getTransactionTime() {
    return transaction_time;
  }


  /**
   * Creates a new Transaction RecordBuilder.
   * @return A new Transaction RecordBuilder
   */
  public static Transaction.Builder newBuilder() {
    return new Transaction.Builder();
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Transaction RecordBuilder
   */
  public static Transaction.Builder newBuilder(Transaction.Builder other) {
    return new Transaction.Builder(other);
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Transaction instance.
   * @param other The existing instance to copy.
   * @return A new Transaction RecordBuilder
   */
  public static Transaction.Builder newBuilder(Transaction other) {
    return new Transaction.Builder(other);
  }

  /**
   * RecordBuilder for Transaction instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transaction>
    implements org.apache.avro.data.RecordBuilder<Transaction> {

    private TransactionType transaction_type;
    private java.lang.String customer_id;
    private double amount;
    private boolean is_fraud;
    /** transaction time */
    private org.joda.time.DateTime transaction_time;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Transaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transaction_type)) {
        this.transaction_type = data().deepCopy(fields()[0].schema(), other.transaction_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[1].schema(), other.customer_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.is_fraud)) {
        this.is_fraud = data().deepCopy(fields()[3].schema(), other.is_fraud);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transaction_time)) {
        this.transaction_time = data().deepCopy(fields()[4].schema(), other.transaction_time);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Transaction instance
     * @param other The existing instance to copy.
     */
    private Builder(Transaction other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.transaction_type)) {
        this.transaction_type = data().deepCopy(fields()[0].schema(), other.transaction_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[1].schema(), other.customer_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.is_fraud)) {
        this.is_fraud = data().deepCopy(fields()[3].schema(), other.is_fraud);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.transaction_time)) {
        this.transaction_time = data().deepCopy(fields()[4].schema(), other.transaction_time);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'transaction_type' field.
      * @return The value.
      */
    public TransactionType getTransactionType() {
      return transaction_type;
    }

    /**
      * Sets the value of the 'transaction_type' field.
      * @param value The value of 'transaction_type'.
      * @return This builder.
      */
    public Transaction.Builder setTransactionType(TransactionType value) {
      validate(fields()[0], value);
      this.transaction_type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_type' field has been set.
      * @return True if the 'transaction_type' field has been set, false otherwise.
      */
    public boolean hasTransactionType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transaction_type' field.
      * @return This builder.
      */
    public Transaction.Builder clearTransactionType() {
      transaction_type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customer_id' field.
      * @return The value.
      */
    public java.lang.String getCustomerId() {
      return customer_id;
    }

    /**
      * Sets the value of the 'customer_id' field.
      * @param value The value of 'customer_id'.
      * @return This builder.
      */
    public Transaction.Builder setCustomerId(java.lang.String value) {
      validate(fields()[1], value);
      this.customer_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customer_id' field has been set.
      * @return True if the 'customer_id' field has been set, false otherwise.
      */
    public boolean hasCustomerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customer_id' field.
      * @return This builder.
      */
    public Transaction.Builder clearCustomerId() {
      customer_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Double getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public Transaction.Builder setAmount(double value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public Transaction.Builder clearAmount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'is_fraud' field.
      * @return The value.
      */
    public java.lang.Boolean getIsFraud() {
      return is_fraud;
    }

    /**
      * Sets the value of the 'is_fraud' field.
      * @param value The value of 'is_fraud'.
      * @return This builder.
      */
    public Transaction.Builder setIsFraud(boolean value) {
      validate(fields()[3], value);
      this.is_fraud = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'is_fraud' field has been set.
      * @return True if the 'is_fraud' field has been set, false otherwise.
      */
    public boolean hasIsFraud() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'is_fraud' field.
      * @return This builder.
      */
    public Transaction.Builder clearIsFraud() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'transaction_time' field.
      * transaction time
      * @return The value.
      */
    public org.joda.time.DateTime getTransactionTime() {
      return transaction_time;
    }

    /**
      * Sets the value of the 'transaction_time' field.
      * transaction time
      * @param value The value of 'transaction_time'.
      * @return This builder.
      */
    public Transaction.Builder setTransactionTime(org.joda.time.DateTime value) {
      validate(fields()[4], value);
      this.transaction_time = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_time' field has been set.
      * transaction time
      * @return True if the 'transaction_time' field has been set, false otherwise.
      */
    public boolean hasTransactionTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'transaction_time' field.
      * transaction time
      * @return This builder.
      */
    public Transaction.Builder clearTransactionTime() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Transaction build() {
      try {
        Transaction record = new Transaction();
        record.transaction_type = fieldSetFlags()[0] ? this.transaction_type : (TransactionType) defaultValue(fields()[0], record.getConversion(0));
        record.customer_id = fieldSetFlags()[1] ? this.customer_id : (java.lang.String) defaultValue(fields()[1], record.getConversion(1));
        record.amount = fieldSetFlags()[2] ? this.amount : (java.lang.Double) defaultValue(fields()[2], record.getConversion(2));
        record.is_fraud = fieldSetFlags()[3] ? this.is_fraud : (java.lang.Boolean) defaultValue(fields()[3], record.getConversion(3));
        record.transaction_time = fieldSetFlags()[4] ? this.transaction_time : (org.joda.time.DateTime) defaultValue(fields()[4], record.getConversion(4));
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Transaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<Transaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Transaction>
    READER$ = (org.apache.avro.io.DatumReader<Transaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
